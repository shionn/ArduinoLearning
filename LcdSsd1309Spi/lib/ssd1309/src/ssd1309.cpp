#include "ssd1309.h"


const unsigned char font[92][6] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // sp
    0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,   // !
    0x00, 0x00, 0x07, 0x00, 0x07, 0x00,   // "
    0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
    0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
    0x00, 0x62, 0x64, 0x08, 0x13, 0x23,   // %
    0x00, 0x36, 0x49, 0x55, 0x22, 0x50,   // &
    0x00, 0x00, 0x05, 0x03, 0x00, 0x00,   // '
    0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,   // (
    0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,   // )
    0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,   // *
    0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,   // +
    0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,   // ,
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08,   // -
    0x00, 0x00, 0x60, 0x60, 0x00, 0x00,   // .
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02,   // /
    0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
    0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
    0x00, 0x42, 0x61, 0x51, 0x49, 0x46,   // 2
    0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
    0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
    0x00, 0x27, 0x45, 0x45, 0x45, 0x39,   // 5
    0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
    0x00, 0x01, 0x71, 0x09, 0x05, 0x03,   // 7
    0x00, 0x36, 0x49, 0x49, 0x49, 0x36,   // 8
    0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
    0x00, 0x00, 0x36, 0x36, 0x00, 0x00,   // :
    0x00, 0x00, 0x56, 0x36, 0x00, 0x00,   // ;
    0x00, 0x08, 0x14, 0x22, 0x41, 0x00,   // <
    0x00, 0x14, 0x14, 0x14, 0x14, 0x14,   // =
    0x00, 0x00, 0x41, 0x22, 0x14, 0x08,   // >
    0x00, 0x02, 0x01, 0x51, 0x09, 0x06,   // ?
    0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,   // @
    0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,   // A
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,   // B
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,   // C
    0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,   // E
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,   // F
    0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,   // G
    0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
    0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,   // I
    0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,   // J
    0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,   // K
    0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,   // L
    0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,   // M
    0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,   // P
    0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
    0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,   // R
    0x00, 0x46, 0x49, 0x49, 0x49, 0x31,   // S
    0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,   // T
    0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
    0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
    0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,   // W
    0x00, 0x63, 0x14, 0x08, 0x14, 0x63,   // X
    0x00, 0x07, 0x08, 0x70, 0x08, 0x07,   // Y
    0x00, 0x61, 0x51, 0x49, 0x45, 0x43,   // Z
    0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,   // [ 91
    0x00, 0x02, 0x04 ,0x08, 0x10, 0x20,   // \92
    0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,   // ]
    0x00, 0x04, 0x02, 0x01, 0x02, 0x04,   // ^
    0x00, 0x40, 0x40, 0x40, 0x40, 0x40,   // _
    0x00, 0x00, 0x01, 0x02, 0x04, 0x00,   // '
    0x00, 0x20, 0x54, 0x54, 0x54, 0x78,   // a
    0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,   // b
    0x00, 0x38, 0x44, 0x44, 0x44, 0x20,   // c
    0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,   // d
    0x00, 0x38, 0x54, 0x54, 0x54, 0x18,   // e
    0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,   // f
    0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,   // g
    0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,   // h
    0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,   // i
    0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,   // j
    0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,   // k
    0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,   // l
    0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,   // m
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,   // n
    0x00, 0x38, 0x44, 0x44, 0x44, 0x38,   // o
    0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,   // p
    0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,   // q
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,   // r
    0x00, 0x48, 0x54, 0x54, 0x54, 0x20,   // s
    0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,   // t
    0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
    0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
    0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44,   // x
    0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,   // y
    0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,   // z
    0x14, 0x14, 0x14, 0x14, 0x14, 0x14    // horiz lines
};

Ssd1309::Ssd1309(uint8_t chipSelectPin, uint8_t readWritePin, uint8_t resetPin) {
	cs = chipSelectPin;
	rw = readWritePin;
	rs = resetPin;
}

void Ssd1309::init() {
	setting = SPISettings(4000000UL, MSBFIRST, SPI_MODE0); // max 4000000

	pinMode(rs, OUTPUT);
	pinMode(cs, OUTPUT);
	pinMode(rw, OUTPUT);

	digitalWrite(cs, LOW);
	digitalWrite(rs, HIGH);
	digitalWrite(rs, LOW);
	delay(100);
	digitalWrite(rs, HIGH);
	digitalWrite(cs, HIGH);
	delay(100);

	SPI.begin();
	SPI.beginTransaction(setting);
	this->sendCommand(0xAE); // display off
	this->sendCommand(0xD5, 0x80); // display clock
	this->sendCommand(0xA8, 0x3F); // Multiplex ratio
	this->sendCommand(0xD3, 0x00); // display offset
	this->sendCommand(0x40); // display start line
	this->sendCommand(0x8D,0x10|0x04 ); // charge pump
	this->sendCommand(0x20,0x02); // memory acces mode (00 : horizontal, 01 vertical, 02 page)
	this->sendCommand(0xA0 || 0x01); // segment remap (00 : 0 to seg0, 01 : 0 to seg 127)
	this->sendCommand(0xC0 || 0x08);// output scan directory (00 : 0 to 63, 08 : 63 to 00)
	this->sendCommand(0xDA, 0x12); // Common HW coinfig ?
	this->sendCommand(0x81,0xCF); // contrast
	this->sendCommand(0xD9,0xF1); // pre charge period (resou le probleme de pixel mal allumÃ©)
	this->sendCommand(0xDB,0x40); // VCom lvl commande ?
	this->sendCommand(0xA4); // entire display on (0xA4 : normal, OxA5 : entire on)
	this->sendCommand(0xA6 | 0x00); // Inverted_Display Color (00 : normal, 01 : inverted)
	this->sendCommand(0xAF); // display on
	SPI.endTransaction();
	delay(1000);
}

void Ssd1309::clearBuffer() {
	for (uint16_t i=0;i<1024;i++) {
		buffer[i] = 0x00;
	}
}

void Ssd1309::pixel(uint8_t x, uint8_t y) {
	uint8_t page = 8 - y / 8;
	uint8_t row = 7 - y % 8;
	buffer[page*128-x-1] |= 1<<row;
}

void Ssd1309::print(uint8_t x, uint8_t y, char* str) {
	uint8_t c=0;
	while (str[c] != '\0') {
		for (uint8_t i=0;i<6;i++) {
			uint8_t pattern = font[str[c] - 32][i];
			for (uint8_t d = 0; d<8;d++) {
				if (pattern & (1<<d)) {
					pixel(x+c*7+i,y+d);
				}
			}
		}
		c++;
	}
}

void Ssd1309::display() {
	SPI.beginTransaction(setting);
	for (uint8_t page = 0;page <8; page++) {
		sendCommand(0xB0+page);
		sendCommand(0x00); // lower column start
		sendCommand(0x10); // high column start
		digitalWrite(rw, HIGH);
		digitalWrite(cs, LOW);
		SPI.transfer(buffer+(page*128), 128);
		digitalWrite(cs, HIGH);
	}
	SPI.endTransaction();
}

void Ssd1309::sendCommand(uint8_t data) {
	digitalWrite(rw, LOW);
	digitalWrite(cs, LOW);
	SPI.transfer(data);
	digitalWrite(cs, HIGH);
}

void Ssd1309::sendCommand(uint8_t data, uint8_t value) {
	digitalWrite(rw, LOW);
	digitalWrite(cs, LOW);
	SPI.transfer(data);
	SPI.transfer(value);
	digitalWrite(cs, HIGH);
}
